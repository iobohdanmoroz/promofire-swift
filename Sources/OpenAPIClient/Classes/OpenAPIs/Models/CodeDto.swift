//
// CodeDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public final class CodeDto: Codable, JSONEncodable, Hashable {

    public enum Status: String, Codable, CaseIterable {
        case active = "ACTIVE"
        case fullyRedeemed = "FULLY_REDEEMED"
        case deactivated = "DEACTIVATED"
    }
    public var value: String
    public var status: Status
    public var templateId: UUID
    public var createdAt: Date
    public var updatedAt: Date
    public var expiresAt: Int
    public var ownerId: UUID
    public var payload: AnyCodable
    /** Should be either 'Infinity' or positive integer string */
    public var amount: String

    public init(value: String, status: Status, templateId: UUID, createdAt: Date, updatedAt: Date, expiresAt: Int, ownerId: UUID, payload: AnyCodable, amount: String) {
        self.value = value
        self.status = status
        self.templateId = templateId
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.expiresAt = expiresAt
        self.ownerId = ownerId
        self.payload = payload
        self.amount = amount
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case value
        case status
        case templateId
        case createdAt
        case updatedAt
        case expiresAt
        case ownerId
        case payload
        case amount
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(value, forKey: .value)
        try container.encode(status, forKey: .status)
        try container.encode(templateId, forKey: .templateId)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
        try container.encode(expiresAt, forKey: .expiresAt)
        try container.encode(ownerId, forKey: .ownerId)
        try container.encode(payload, forKey: .payload)
        try container.encode(amount, forKey: .amount)
    }

    public static func == (lhs: CodeDto, rhs: CodeDto) -> Bool {
        lhs.value == rhs.value &&
        lhs.status == rhs.status &&
        lhs.templateId == rhs.templateId &&
        lhs.createdAt == rhs.createdAt &&
        lhs.updatedAt == rhs.updatedAt &&
        lhs.expiresAt == rhs.expiresAt &&
        lhs.ownerId == rhs.ownerId &&
        lhs.payload == rhs.payload &&
        lhs.amount == rhs.amount
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(value.hashValue)
        hasher.combine(status.hashValue)
        hasher.combine(templateId.hashValue)
        hasher.combine(createdAt.hashValue)
        hasher.combine(updatedAt.hashValue)
        hasher.combine(expiresAt.hashValue)
        hasher.combine(ownerId.hashValue)
        hasher.combine(payload.hashValue)
        hasher.combine(amount.hashValue)
        
    }
}

