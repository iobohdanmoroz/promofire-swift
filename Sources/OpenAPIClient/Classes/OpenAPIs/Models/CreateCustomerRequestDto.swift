//
// CreateCustomerRequestDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public final class CreateCustomerRequestDto: Codable, JSONEncodable, Hashable {

    public enum Platform: String, Codable, CaseIterable {
        case android = "ANDROID"
        case ios = "IOS"
        case web = "WEB"
    }
    public var platform: Platform
    public var device: String
    public var os: String
    public var appBuild: String
    public var appVersion: String
    public var sdkVersion: String
    public var tenantAssignedId: String?
    public var firstName: String?
    public var lastName: String?
    public var email: String?
    public var phone: String?

    public init(platform: Platform, device: String, os: String, appBuild: String, appVersion: String, sdkVersion: String, tenantAssignedId: String? = nil, firstName: String? = nil, lastName: String? = nil, email: String? = nil, phone: String? = nil) {
        self.platform = platform
        self.device = device
        self.os = os
        self.appBuild = appBuild
        self.appVersion = appVersion
        self.sdkVersion = sdkVersion
        self.tenantAssignedId = tenantAssignedId
        self.firstName = firstName
        self.lastName = lastName
        self.email = email
        self.phone = phone
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case platform
        case device
        case os
        case appBuild
        case appVersion
        case sdkVersion
        case tenantAssignedId
        case firstName
        case lastName
        case email
        case phone
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(platform, forKey: .platform)
        try container.encode(device, forKey: .device)
        try container.encode(os, forKey: .os)
        try container.encode(appBuild, forKey: .appBuild)
        try container.encode(appVersion, forKey: .appVersion)
        try container.encode(sdkVersion, forKey: .sdkVersion)
        try container.encodeIfPresent(tenantAssignedId, forKey: .tenantAssignedId)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(phone, forKey: .phone)
    }

    public static func == (lhs: CreateCustomerRequestDto, rhs: CreateCustomerRequestDto) -> Bool {
        lhs.platform == rhs.platform &&
        lhs.device == rhs.device &&
        lhs.os == rhs.os &&
        lhs.appBuild == rhs.appBuild &&
        lhs.appVersion == rhs.appVersion &&
        lhs.sdkVersion == rhs.sdkVersion &&
        lhs.tenantAssignedId == rhs.tenantAssignedId &&
        lhs.firstName == rhs.firstName &&
        lhs.lastName == rhs.lastName &&
        lhs.email == rhs.email &&
        lhs.phone == rhs.phone
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(platform.hashValue)
        hasher.combine(device.hashValue)
        hasher.combine(os.hashValue)
        hasher.combine(appBuild.hashValue)
        hasher.combine(appVersion.hashValue)
        hasher.combine(sdkVersion.hashValue)
        hasher.combine(tenantAssignedId?.hashValue)
        hasher.combine(firstName?.hashValue)
        hasher.combine(lastName?.hashValue)
        hasher.combine(email?.hashValue)
        hasher.combine(phone?.hashValue)
        
    }
}

