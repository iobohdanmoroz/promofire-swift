//
// CodeTemplateDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public final class CodeTemplateDto: Codable, JSONEncodable, Hashable {

    public enum Status: String, Codable, CaseIterable {
        case active = "ACTIVE"
        case deactivated = "DEACTIVATED"
        case archived = "ARCHIVED"
    }
    public var id: UUID
    public var name: String
    public var creatorId: UUID
    public var status: Status
    public var createdAt: Date
    public var ttl: Double
    /** Either 'Infinity' or positive integer string */
    public var amount: String
    public var hasMutablePayload: Bool
    public var isUsableByCustomers: Bool
    public var description: String?
    public var payload: AnyCodable

    public init(id: UUID, name: String, creatorId: UUID, status: Status, createdAt: Date, ttl: Double, amount: String, hasMutablePayload: Bool, isUsableByCustomers: Bool, description: String?, payload: AnyCodable) {
        self.id = id
        self.name = name
        self.creatorId = creatorId
        self.status = status
        self.createdAt = createdAt
        self.ttl = ttl
        self.amount = amount
        self.hasMutablePayload = hasMutablePayload
        self.isUsableByCustomers = isUsableByCustomers
        self.description = description
        self.payload = payload
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case creatorId
        case status
        case createdAt
        case ttl
        case amount
        case hasMutablePayload
        case isUsableByCustomers
        case description
        case payload
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(name, forKey: .name)
        try container.encode(creatorId, forKey: .creatorId)
        try container.encode(status, forKey: .status)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(ttl, forKey: .ttl)
        try container.encode(amount, forKey: .amount)
        try container.encode(hasMutablePayload, forKey: .hasMutablePayload)
        try container.encode(isUsableByCustomers, forKey: .isUsableByCustomers)
        try container.encode(description, forKey: .description)
        try container.encode(payload, forKey: .payload)
    }

    public static func == (lhs: CodeTemplateDto, rhs: CodeTemplateDto) -> Bool {
        lhs.id == rhs.id &&
        lhs.name == rhs.name &&
        lhs.creatorId == rhs.creatorId &&
        lhs.status == rhs.status &&
        lhs.createdAt == rhs.createdAt &&
        lhs.ttl == rhs.ttl &&
        lhs.amount == rhs.amount &&
        lhs.hasMutablePayload == rhs.hasMutablePayload &&
        lhs.isUsableByCustomers == rhs.isUsableByCustomers &&
        lhs.description == rhs.description &&
        lhs.payload == rhs.payload
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id.hashValue)
        hasher.combine(name.hashValue)
        hasher.combine(creatorId.hashValue)
        hasher.combine(status.hashValue)
        hasher.combine(createdAt.hashValue)
        hasher.combine(ttl.hashValue)
        hasher.combine(amount.hashValue)
        hasher.combine(hasMutablePayload.hashValue)
        hasher.combine(isUsableByCustomers.hashValue)
        hasher.combine(description.hashValue)
        hasher.combine(payload.hashValue)
        
    }
}

