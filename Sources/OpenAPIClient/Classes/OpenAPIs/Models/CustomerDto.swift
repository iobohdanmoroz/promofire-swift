//
// CustomerDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public final class CustomerDto: Codable, JSONEncodable, Hashable {

    public enum Country: String, Codable, CaseIterable {
        case af = "AF"
        case ax = "AX"
        case al = "AL"
        case dz = "DZ"
        case _as = "AS"
        case ad = "AD"
        case ao = "AO"
        case ai = "AI"
        case aq = "AQ"
        case ag = "AG"
        case ar = "AR"
        case am = "AM"
        case aw = "AW"
        case au = "AU"
        case at = "AT"
        case az = "AZ"
        case bs = "BS"
        case bh = "BH"
        case bd = "BD"
        case bb = "BB"
        case by = "BY"
        case be = "BE"
        case bz = "BZ"
        case bj = "BJ"
        case bm = "BM"
        case bt = "BT"
        case bo = "BO"
        case ba = "BA"
        case bw = "BW"
        case bv = "BV"
        case br = "BR"
        case io = "IO"
        case bn = "BN"
        case bg = "BG"
        case bf = "BF"
        case bi = "BI"
        case kh = "KH"
        case cm = "CM"
        case ca = "CA"
        case cv = "CV"
        case ky = "KY"
        case cf = "CF"
        case td = "TD"
        case cl = "CL"
        case cn = "CN"
        case cx = "CX"
        case cc = "CC"
        case co = "CO"
        case km = "KM"
        case cg = "CG"
        case cd = "CD"
        case ck = "CK"
        case cr = "CR"
        case ci = "CI"
        case hr = "HR"
        case cu = "CU"
        case cy = "CY"
        case cz = "CZ"
        case dk = "DK"
        case dj = "DJ"
        case dm = "DM"
        case _do = "DO"
        case ec = "EC"
        case eg = "EG"
        case sv = "SV"
        case gq = "GQ"
        case er = "ER"
        case ee = "EE"
        case et = "ET"
        case fk = "FK"
        case fo = "FO"
        case fj = "FJ"
        case fi = "FI"
        case fr = "FR"
        case gf = "GF"
        case pf = "PF"
        case tf = "TF"
        case ga = "GA"
        case gm = "GM"
        case ge = "GE"
        case de = "DE"
        case gh = "GH"
        case gi = "GI"
        case gr = "GR"
        case gl = "GL"
        case gd = "GD"
        case gp = "GP"
        case gu = "GU"
        case gt = "GT"
        case gg = "GG"
        case gn = "GN"
        case gw = "GW"
        case gy = "GY"
        case ht = "HT"
        case hm = "HM"
        case va = "VA"
        case hn = "HN"
        case hk = "HK"
        case hu = "HU"
        case _is = "IS"
        case _in = "IN"
        case id = "ID"
        case ir = "IR"
        case iq = "IQ"
        case ie = "IE"
        case im = "IM"
        case il = "IL"
        case it = "IT"
        case jm = "JM"
        case jp = "JP"
        case je = "JE"
        case jo = "JO"
        case kz = "KZ"
        case ke = "KE"
        case ki = "KI"
        case kp = "KP"
        case kr = "KR"
        case kw = "KW"
        case kg = "KG"
        case la = "LA"
        case lv = "LV"
        case lb = "LB"
        case ls = "LS"
        case lr = "LR"
        case ly = "LY"
        case li = "LI"
        case lt = "LT"
        case lu = "LU"
        case mo = "MO"
        case mk = "MK"
        case mg = "MG"
        case mw = "MW"
        case my = "MY"
        case mv = "MV"
        case ml = "ML"
        case mt = "MT"
        case mh = "MH"
        case mq = "MQ"
        case mr = "MR"
        case mu = "MU"
        case yt = "YT"
        case mx = "MX"
        case fm = "FM"
        case md = "MD"
        case mc = "MC"
        case mn = "MN"
        case ms = "MS"
        case ma = "MA"
        case mz = "MZ"
        case mm = "MM"
        case na = "NA"
        case nr = "NR"
        case np = "NP"
        case nl = "NL"
        case an = "AN"
        case nc = "NC"
        case nz = "NZ"
        case ni = "NI"
        case ne = "NE"
        case ng = "NG"
        case nu = "NU"
        case nf = "NF"
        case mp = "MP"
        case no = "NO"
        case om = "OM"
        case pk = "PK"
        case pw = "PW"
        case ps = "PS"
        case pa = "PA"
        case pg = "PG"
        case py = "PY"
        case pe = "PE"
        case ph = "PH"
        case pn = "PN"
        case pl = "PL"
        case pt = "PT"
        case pr = "PR"
        case qa = "QA"
        case re = "RE"
        case ro = "RO"
        case ru = "RU"
        case rw = "RW"
        case sh = "SH"
        case kn = "KN"
        case lc = "LC"
        case pm = "PM"
        case vc = "VC"
        case ws = "WS"
        case sm = "SM"
        case st = "ST"
        case sa = "SA"
        case sn = "SN"
        case cs = "CS"
        case sc = "SC"
        case sl = "SL"
        case sg = "SG"
        case sk = "SK"
        case si = "SI"
        case sb = "SB"
        case so = "SO"
        case za = "ZA"
        case gs = "GS"
        case es = "ES"
        case lk = "LK"
        case sd = "SD"
        case sr = "SR"
        case sj = "SJ"
        case sz = "SZ"
        case se = "SE"
        case ch = "CH"
        case sy = "SY"
        case tw = "TW"
        case tj = "TJ"
        case tz = "TZ"
        case th = "TH"
        case tl = "TL"
        case tg = "TG"
        case tk = "TK"
        case to = "TO"
        case tt = "TT"
        case tn = "TN"
        case tr = "TR"
        case tm = "TM"
        case tc = "TC"
        case tv = "TV"
        case ug = "UG"
        case ua = "UA"
        case ae = "AE"
        case gb = "GB"
        case us = "US"
        case um = "UM"
        case uy = "UY"
        case uz = "UZ"
        case vu = "VU"
        case ve = "VE"
        case vn = "VN"
        case vg = "VG"
        case vi = "VI"
        case wf = "WF"
        case eh = "EH"
        case ye = "YE"
        case zm = "ZM"
        case zw = "ZW"
    }
    public enum Platform: String, Codable, CaseIterable {
        case android = "ANDROID"
        case ios = "IOS"
        case web = "WEB"
    }
    public var id: UUID
    public var tenantAssignedId: String?
    public var country: Country?
    public var platform: Platform
    public var device: String?
    public var os: String?
    public var appBuild: String?
    public var appVersion: String?
    public var sdkVersion: String?
    public var firstName: String?
    public var lastName: String?
    public var email: String?
    public var phone: String?
    public var createdAt: String
    public var lastSession: String
    public var description: String?

    public init(id: UUID, tenantAssignedId: String?, country: Country?, platform: Platform, device: String?, os: String?, appBuild: String?, appVersion: String?, sdkVersion: String?, firstName: String?, lastName: String?, email: String?, phone: String?, createdAt: String, lastSession: String, description: String?) {
        self.id = id
        self.tenantAssignedId = tenantAssignedId
        self.country = country
        self.platform = platform
        self.device = device
        self.os = os
        self.appBuild = appBuild
        self.appVersion = appVersion
        self.sdkVersion = sdkVersion
        self.firstName = firstName
        self.lastName = lastName
        self.email = email
        self.phone = phone
        self.createdAt = createdAt
        self.lastSession = lastSession
        self.description = description
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case tenantAssignedId
        case country
        case platform
        case device
        case os
        case appBuild
        case appVersion
        case sdkVersion
        case firstName
        case lastName
        case email
        case phone
        case createdAt
        case lastSession
        case description
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(tenantAssignedId, forKey: .tenantAssignedId)
        try container.encode(country, forKey: .country)
        try container.encode(platform, forKey: .platform)
        try container.encode(device, forKey: .device)
        try container.encode(os, forKey: .os)
        try container.encode(appBuild, forKey: .appBuild)
        try container.encode(appVersion, forKey: .appVersion)
        try container.encode(sdkVersion, forKey: .sdkVersion)
        try container.encode(firstName, forKey: .firstName)
        try container.encode(lastName, forKey: .lastName)
        try container.encode(email, forKey: .email)
        try container.encode(phone, forKey: .phone)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(lastSession, forKey: .lastSession)
        try container.encode(description, forKey: .description)
    }

    public static func == (lhs: CustomerDto, rhs: CustomerDto) -> Bool {
        lhs.id == rhs.id &&
        lhs.tenantAssignedId == rhs.tenantAssignedId &&
        lhs.country == rhs.country &&
        lhs.platform == rhs.platform &&
        lhs.device == rhs.device &&
        lhs.os == rhs.os &&
        lhs.appBuild == rhs.appBuild &&
        lhs.appVersion == rhs.appVersion &&
        lhs.sdkVersion == rhs.sdkVersion &&
        lhs.firstName == rhs.firstName &&
        lhs.lastName == rhs.lastName &&
        lhs.email == rhs.email &&
        lhs.phone == rhs.phone &&
        lhs.createdAt == rhs.createdAt &&
        lhs.lastSession == rhs.lastSession &&
        lhs.description == rhs.description
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id.hashValue)
        hasher.combine(tenantAssignedId.hashValue)
        hasher.combine(country.hashValue)
        hasher.combine(platform.hashValue)
        hasher.combine(device.hashValue)
        hasher.combine(os.hashValue)
        hasher.combine(appBuild.hashValue)
        hasher.combine(appVersion.hashValue)
        hasher.combine(sdkVersion.hashValue)
        hasher.combine(firstName.hashValue)
        hasher.combine(lastName.hashValue)
        hasher.combine(email.hashValue)
        hasher.combine(phone.hashValue)
        hasher.combine(createdAt.hashValue)
        hasher.combine(lastSession.hashValue)
        hasher.combine(description.hashValue)
        
    }
}

